 Phantom reference objects, which are enqueued after the collector
 determines that their referents may otherwise be reclaimed.  Phantom
 references are most often used for scheduling pre-mortem cleanup actions in
 a more flexible way than is possible with the Java finalization mechanism.

 <p> If the garbage collector determines at a certain point in time that the
 referent of a phantom reference is <a
 href="package-summary.html#reachability">phantom reachable</a>, then at that
 time or at some later time it will enqueue the reference.

 <p> In order to ensure that a reclaimable object remains so, the referent of
 a phantom reference may not be retrieved: The <code>get</code> method of a
 phantom reference always returns <code>null</code>.

 <p> Unlike soft and weak references, phantom references are not
 automatically cleared by the garbage collector as they are enqueued.  An
 object that is reachable via phantom references will remain so until all
 such references are cleared or themselves become unreachable.
 <DL><DT><B>Authors:</B></DT><DD>Mark Reinhold</DD></DL><DL><DT><B>Version:</B></DT><DD>%I%, %G%</DD></DL><DL><DT><B>Since:</B></DT><DD>1.2</DD></DL>
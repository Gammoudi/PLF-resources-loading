 A class loader is an object that is responsible for loading classes. The
 class <tt>ClassLoader</tt> is an abstract class.  Given the <a
 href="#name">binary name</a> of a class, a class loader should attempt to
 locate or generate data that constitutes a definition for the class.  A
 typical strategy is to transform the name into a file name and then read a
 "class file" of that name from a file system.

 <p> Every <a href='../java/lang/Class.html' title='<tt>Class</tt>'><tt>Class</tt></a> object contains a <a href='../java/lang/Class.html#getClassLoader()' title='reference'>reference</a> to the <tt>ClassLoader</tt> that defined
 it.

 <p> <tt>Class</tt> objects for array classes are not created by class
 loaders, but are created automatically as required by the Java runtime.
 The class loader for an array class, as returned by <a href='../java/lang/Class.html#getClassLoader()' title='Class.getClassLoader'>Class.getClassLoader</a> is the same as the class loader for its element
 type; if the element type is a primitive type, then the array class has no
 class loader.

 <p> Applications implement subclasses of <tt>ClassLoader</tt> in order to
 extend the manner in which the Java virtual machine dynamically loads
 classes.

 <p> Class loaders may typically be used by security managers to indicate
 security domains.

 <p> The <tt>ClassLoader</tt> class uses a delegation model to search for
 classes and resources.  Each instance of <tt>ClassLoader</tt> has an
 associated parent class loader.  When requested to find a class or
 resource, a <tt>ClassLoader</tt> instance will delegate the search for the
 class or resource to its parent class loader before attempting to find the
 class or resource itself.  The virtual machine's built-in class loader,
 called the "bootstrap class loader", does not itself have a parent but may
 serve as the parent of a <tt>ClassLoader</tt> instance.

 <p> Normally, the Java virtual machine loads classes from the local file
 system in a platform-dependent manner.  For example, on UNIX systems, the
 virtual machine loads classes from the directory defined by the
 <tt>CLASSPATH</tt> environment variable.

 <p> However, some classes may not originate from a file; they may originate
 from other sources, such as the network, or they could be constructed by an
 application.  The method <a href='#defineClass(String, byte[], int, int)'> <tt>defineClass</tt></a> converts an array of bytes into an instance of class
 <tt>Class</tt>. Instances of this newly defined class can be created using
 <a href='../java/lang/Class.html#newInstance' title='<tt>Class.newInstance</tt>'><tt>Class.newInstance</tt></a>.

 <p> The methods and constructors of objects created by a class loader may
 reference other classes.  To determine the class(es) referred to, the Java
 virtual machine invokes the <a href='#loadClass'><tt>loadClass</tt></a> method of
 the class loader that originally created the class.

 <p> For example, an application could create a network class loader to
 download class files from a server.  Sample code might look like:

 <blockquote><pre>
   ClassLoader loader&nbsp;= new NetworkClassLoader(host,&nbsp;port);
   Object main&nbsp;= loader.loadClass("Main", true).newInstance();
	 &nbsp;.&nbsp;.&nbsp;.
 </pre></blockquote>

 <p> The network class loader subclass must define the methods <a href='#findClass'><tt>findClass</tt></a> and <tt>loadClassData</tt> to load a class
 from the network.  Once it has downloaded the bytes that make up the class,
 it should use the method <a href='#defineClass'><tt>defineClass</tt></a> to
 create a class instance.  A sample implementation is:

 <blockquote><pre>
     class NetworkClassLoader extends ClassLoader {
         String host;
         int port;

         public Class findClass(String name) {
             byte[] b = loadClassData(name);
             return defineClass(name, b, 0, b.length);
         }

         private byte[] loadClassData(String name) {
             // load the class data from the connection
             &nbsp;.&nbsp;.&nbsp;.
         }
     }
 </pre></blockquote>

 <h4> <a name="name">Binary names</a> </h4>

 <p> Any class name provided as a <a href='../java/lang/String.html' title='String'>String</a> parameter to methods in
 <tt>ClassLoader</tt> must be a binary name as defined by the <a
 href="http://java.sun.com/docs/books/jls/">Java Language Specification</a>.

 <p> Examples of valid class names include:
 <blockquote><pre>
   "java.lang.String"
   "javax.swing.JSpinner$DefaultEditor"
   "java.security.KeyStore$Builder$FileBuilder$1"
   "java.net.URLClassLoader$3$1"
 </pre></blockquote>
 <DL><DT><B>Version:</B></DT><DD>1.189, 11/17/05</DD></DL><DL><DT><B>See Also:</B></DT><DD><a href='#resolveClass(java.lang.Class)'>resolveClass(Class)</a></DD></DL><DL><DT><B>Since:</B></DT><DD>1.0</DD></DL>
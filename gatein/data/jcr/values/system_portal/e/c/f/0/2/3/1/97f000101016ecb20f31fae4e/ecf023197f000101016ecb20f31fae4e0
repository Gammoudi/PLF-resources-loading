 This interface imposes a total ordering on the objects of each class that
 implements it.  This ordering is referred to as the class's <i>natural
 ordering</i>, and the class's <tt>compareTo</tt> method is referred to as
 its <i>natural comparison method</i>.<p>

 Lists (and arrays) of objects that implement this interface can be sorted
 automatically by java.util.Collections#sort(java.util.List) (and
 java.util.Arrays#sort(Object[])).  Objects that implement this
 interface can be used as keys in a {<DL><DT><B>linkplain:</B></DT><DD>SortedMap sorted map} or as
 elements in a {@linkplain SortedSet sorted set}, without the need to
 specify a {@linkplain Comparator comparator}.<p>

 The natural ordering for a class <tt>C</tt> is said to be <i>consistent
 with equals</i> if and only if <tt>e1.compareTo(e2) == 0</tt> has
 the same boolean value as <tt>e1.equals(e2)</tt> for every
 <tt>e1</tt> and <tt>e2</tt> of class <tt>C</tt>.  Note that <tt>null</tt>
 is not an instance of any class, and <tt>e.compareTo(null)</tt> should
 throw a <tt>NullPointerException</tt> even though <tt>e.equals(null)</tt>
 returns <tt>false</tt>.<p>

 It is strongly recommended (though not required) that natural orderings be
 consistent with equals.  This is so because sorted sets (and sorted maps)
 without explicit comparators behave "strangely" when they are used with
 elements (or keys) whose natural ordering is inconsistent with equals.  In
 particular, such a sorted set (or sorted map) violates the general contract
 for set (or map), which is defined in terms of the <tt>equals</tt>
 method.<p>

 For example, if one adds two keys <tt>a</tt> and <tt>b</tt> such that
 <tt>(!a.equals(b) && a.compareTo(b) == 0)</tt> to a sorted
 set that does not use an explicit comparator, the second <tt>add</tt>
 operation returns false (and the size of the sorted set does not increase)
 because <tt>a</tt> and <tt>b</tt> are equivalent from the sorted set's
 perspective.<p>

 Virtually all Java core classes that implement <tt>Comparable</tt> have natural
 orderings that are consistent with equals.  One exception is
 <tt>java.math.BigDecimal</tt>, whose natural ordering equates
 <tt>BigDecimal</tt> objects with equal values and different precisions
 (such as 4.0 and 4.00).<p>

 For the mathematically inclined, the <i>relation</i> that defines
 the natural ordering on a given class C is:<pre>
       {(x, y) such that x.compareTo(y) &lt;= 0}.
 </pre> The <i>quotient</i> for this total order is: <pre>
       {(x, y) such that x.compareTo(y) == 0}.
 </pre>

 It follows immediately from the contract for <tt>compareTo</tt> that the
 quotient is an <i>equivalence relation</i> on <tt>C</tt>, and that the
 natural ordering is a <i>total order</i> on <tt>C</tt>.  When we say that a
 class's natural ordering is <i>consistent with equals</i>, we mean that the
 quotient for the natural ordering is the equivalence relation defined by
 the class's <a href='../java/lang/Object.html#equals(Object) equals(Object)' title='Object.equals'>Object.equals</a> method:<pre>
     {(x, y) such that x.equals(y)}. </pre><p>

 This interface is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.</DD></DL>
 <DL><DT><B>Parameters:</B></DT><DD><code><T></code> -  the type of objects that this object may be compared to</DD></DL><DL><DT><B>Authors:</B></DT><DD>Josh Bloch</DD></DL><DL><DT><B>Version:</B></DT><DD>%I%, %G%</DD></DL><DL><DT><B>See Also:</B></DT><DD>java.util.Comparator</DD></DL><DL><DT><B>Since:</B></DT><DD>1.2</DD></DL>
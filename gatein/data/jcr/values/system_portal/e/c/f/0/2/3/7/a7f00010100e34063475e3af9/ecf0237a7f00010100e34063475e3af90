 The <code>Compiler</code> class is provided to support
 Java-to-native-code compilers and related services. By design, the
 <code>Compiler</code> class does nothing; it serves as a
 placeholder for a JIT compiler implementation.
 <p>
 When the Java Virtual Machine first starts, it determines if the
 system property <code>java.compiler</code> exists. (System
 properties are accessible through <code>getProperty</code>,
 a method defined by the <code>System</code> class.) If so, it is
 assumed to be the name of a library (with a platform-dependent
 exact location and type); the <code>loadLibrary</code> method in
 class <code>System</code> is called to load that library. If this
 loading succeeds, the function named
 <code>java_lang_Compiler_start()</code> in that library is called.
 <p>
 If no compiler is available, these methods do nothing.
 <DL><DT><B>Authors:</B></DT><DD>Frank Yellin</DD></DL><DL><DT><B>Version:</B></DT><DD>%I%, %G%</DD></DL><DL><DT><B>See Also:</B></DT><DD><a href='../java/lang/System.html#getProperty(java.lang.String)' title='System.getProperty'>System.getProperty</a></DD><DD><a href='../java/lang/System.html#getProperty(java.lang.String, java.lang.String)' title='System.getProperty'>System.getProperty</a></DD><DD><a href='../java/lang/System.html#loadLibrary(java.lang.String)' title='System.loadLibrary'>System.loadLibrary</a></DD></DL><DL><DT><B>Since:</B></DT><DD>JDK1.0</DD></DL>
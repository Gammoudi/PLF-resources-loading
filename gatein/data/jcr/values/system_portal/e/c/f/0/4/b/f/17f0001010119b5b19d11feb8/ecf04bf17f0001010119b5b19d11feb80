
     * Returns a map of stack traces for all live threads.
     * The map keys are threads and each map value is an array of
     * <tt>StackTraceElement</tt> that represents the stack dump
     * of the corresponding <tt>Thread</tt>.
     * The returned stack traces are in the format specified for
     * the {@link #getStackTrace getStackTrace} method.
     *
     * <p>The threads may be executing while this method is called.
     * The stack trace of each thread only represents a snapshot and
     * each stack trace may be obtained at different time.  A zero-length
     * array will be returned in the map value if the virtual machine has 
     * no stack trace information about a thread.
     *
     * <p>If there is a security manager, then the security manager's 
     * <tt>checkPermission</tt> method is called with a 
     * <tt>RuntimePermission("getStackTrace")</tt> permission as well as
     * <tt>RuntimePermission("modifyThreadGroup")</tt> permission
     * to see if it is ok to get the stack trace of all threads. 
     *
     * @return a <tt>Map</tt> from <tt>Thread</tt> to an array of 
     * <tt>StackTraceElement</tt> that represents the stack trace of 
     * the corresponding thread.
     *
     * @throws SecurityException
     *        if a security manager exists and its 
     *        <tt>checkPermission</tt> method doesn't allow 
     *        getting the stack trace of thread.
     * @see #getStackTrace
     * @see SecurityManager#checkPermission
     * @see RuntimePermission
     * @see Throwable#getStackTrace
     *
     * @since 1.5
     
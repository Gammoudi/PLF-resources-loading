
     * Copies into the specified array every active thread in this 
     * thread group. If the <code>recurse</code> flag is 
     * <code>true</code>, references to every active thread in this 
     * thread's subgroups are also included. If the array is too short to 
     * hold all the threads, the extra threads are silently ignored. 
     * <p>
     * First, the <code>checkAccess</code> method of this thread group is 
     * called with no arguments; this may result in a security exception. 
     * <p>
     * An application might use the <code>activeCount</code> method to 
     * get an estimate of how big the array should be, however <i>if the
     * array is too short to hold all the threads, the extra threads are
     * silently ignored.</i>  If it is critical to obtain every active thread
     * in this thread group, the caller should verify that the returned int
     * value is strictly less than the length of <tt>list</tt>.
     * <p>
     * Due to the inherent race condition in this method, it is recommended
     * that the method only be used for informational purposes.
     *
     * @param   list      an array into which to place the list of threads.
     * @param   recurse   a flag indicating whether also to include threads
     *                    in thread groups that are subgroups of this
     *                    thread group.
     * @return  the number of threads placed into the array.
     * @exception  SecurityException  if the current thread does not
     *               have permission to enumerate this thread group.
     * @see     java.lang.ThreadGroup#activeCount()
     * @see     java.lang.ThreadGroup#checkAccess()
     * @since   JDK1.0
     
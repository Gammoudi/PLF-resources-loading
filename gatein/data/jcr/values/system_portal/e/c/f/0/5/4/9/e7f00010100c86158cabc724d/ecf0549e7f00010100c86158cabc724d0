 This class provides thread-local variables.  These variables differ from
 their normal counterparts in that each thread that accesses one (via its
 <tt>get</tt> or <tt>set</tt> method) has its own, independently initialized
 copy of the variable.  <tt>ThreadLocal</tt> instances are typically private
 static fields in classes that wish to associate state with a thread (e.g.,
 a user ID or Transaction ID).

 <p>For example, the class below generates unique identifiers local to each
 thread.
 A thread's id is
 assigned the first time it invokes <tt>UniqueThreadIdGenerator.getCurrentThreadId()</tt> and remains unchanged on subsequent calls.
 <pre>
 import java.util.concurrent.atomic.AtomicInteger;

 public class UniqueThreadIdGenerator {

     private static final AtomicInteger uniqueId = new AtomicInteger(0);

     private static final ThreadLocal &lt; Integer > uniqueNum = 
         new ThreadLocal &lt; Integer > () {
             &#64;Override protected Integer initialValue() {
                 return uniqueId.getAndIncrement();
         }
     };
 
     public static int getCurrentThreadId() {
         return uniqueId.get();
     }
 } // UniqueThreadIdGenerator
 </pre>
 <p>Each thread holds an implicit reference to its copy of a thread-local
 variable as long as the thread is alive and the <tt>ThreadLocal</tt>
 instance is accessible; after a thread goes away, all of its copies of
 thread-local instances are subject to garbage collection (unless other
 references to these copies exist).
 <DL><DT><B>Authors:</B></DT><DD>Josh Bloch and Doug Lea</DD></DL><DL><DT><B>Version:</B></DT><DD>%I%, %G%</DD></DL><DL><DT><B>Since:</B></DT><DD>1.2</DD></DL>
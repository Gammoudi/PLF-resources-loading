 An unbounded thread-safe {<DL><DT><B>linkplain:</B></DT><DD>Queue queue} based on linked nodes.
 This queue orders elements FIFO (first-in-first-out).
 The <em>head</em> of the queue is that element that has been on the
 queue the longest time.
 The <em>tail</em> of the queue is that element that has been on the
 queue the shortest time. New elements
 are inserted at the tail of the queue, and the queue retrieval
 operations obtain elements at the head of the queue.
 A <TT>ConcurrentLinkedQueue</TT> is an appropriate choice when
 many threads will share access to a common collection.
 This queue does not permit <TT>null</TT> elements.

 <p>This implementation employs an efficient &quot;wait-free&quot;
 algorithm based on one described in <a
 href="http://www.cs.rochester.edu/u/michael/PODC96.html"> Simple,
 Fast, and Practical Non-Blocking and Blocking Concurrent Queue
 Algorithms</a> by Maged M. Michael and Michael L. Scott.

 <p>Beware that, unlike in most collections, the <TT>size</TT> method
 is <em>NOT</em> a constant-time operation. Because of the
 asynchronous nature of these queues, determining the current number
 of elements requires a traversal of the elements.

 <p>This class and its iterator implement all of the
 <em>optional</em> methods of the java.util.Collection and java.util.Iterator interfaces.

 <p>Memory consistency effects: As with other concurrent
 collections, actions in a thread prior to placing an object into a
 <TT>ConcurrentLinkedQueue</TT>
 <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>
 actions subsequent to the access or removal of that element from
 the <TT>ConcurrentLinkedQueue</TT> in another thread.

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.</DD></DL>

 <DL><DT><B>Parameters:</B></DT><DD><code><E></code> -  the type of elements held in this collection</DD></DL><DL><DT><B>Authors:</B></DT><DD>Doug Lea</DD></DL><DL><DT><B>Since:</B></DT><DD>1.5</DD></DL>
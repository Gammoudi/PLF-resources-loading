 An <a href='../java/util/concurrent/Executor.html' title='Executor'>Executor</a> that provides methods to manage termination and
 methods that can produce a <a href='../java/util/concurrent/Future.html' title='Future'>Future</a> for tracking progress of
 one or more asynchronous tasks.

 <p> An <tt>ExecutorService</tt> can be shut down, which will cause
 it to reject new tasks.  Two different methods are provided for
 shutting down an <tt>ExecutorService</tt>. The <a href='#shutdown'>shutdown</a>
 method will allow previously submitted tasks to execute before
 terminating, while the <a href='#shutdownNow'>shutdownNow</a> method prevents waiting
 tasks from starting and attempts to stop currently executing tasks.
 Upon termination, an executor has no tasks actively executing, no
 tasks awaiting execution, and no new tasks can be submitted.  An
 unused <tt>ExecutorService</tt> should be shut down to allow
 reclamation of its resources.

 <p> Method <tt>submit</tt> extends base method <a href='../java/util/concurrent/Executor.html#execute' title='Executor.execute'>Executor.execute</a> by creating and returning a <a href='../java/util/concurrent/Future.html' title='Future'>Future</a> that
 can be used to cancel execution and/or wait for completion.
 Methods <tt>invokeAny</tt> and <tt>invokeAll</tt> perform the most
 commonly useful forms of bulk execution, executing a collection of
 tasks and then waiting for at least one, or all, to
 complete. (Class <a href='../java/util/concurrent/ExecutorCompletionService.html' title='ExecutorCompletionService'>ExecutorCompletionService</a> can be used to
 write customized variants of these methods.)

 <p>The <a href='../java/util/concurrent/Executors.html' title='Executors'>Executors</a> class provides factory methods for the
 executor services provided in this package.

 <h3>Usage Examples</h3>

 Here is a sketch of a network service in which threads in a thread
 pool service incoming requests. It uses the preconfigured <a href='../java/util/concurrent/Executors.html#newFixedThreadPool' title='Executors.newFixedThreadPool'>Executors.newFixedThreadPool</a> factory method:

 <pre>
 class NetworkService implements Runnable {
   private final ServerSocket serverSocket;
   private final ExecutorService pool;

   public NetworkService(int port, int poolSize)
       throws IOException {
     serverSocket = new ServerSocket(port);
     pool = Executors.newFixedThreadPool(poolSize);
   }

   public void run() { // run the service
     try {
       for (;;) {
         pool.execute(new Handler(serverSocket.accept()));
       }
     } catch (IOException ex) {
       pool.shutdown();
     }
   }
 }

 class Handler implements Runnable {
   private final Socket socket;
   Handler(Socket socket) { this.socket = socket; }
   public void run() {
     // read and service request on socket
   }
 }
 </pre>

 The following method shuts down an <tt>ExecutorService</tt> in two phases,
 first by calling <tt>shutdown</tt> to reject incoming tasks, and then
 calling <tt>shutdownNow</tt>, if necessary, to cancel any lingering tasks:

 <pre>
 void shutdownAndAwaitTermination(ExecutorService pool) {
   pool.shutdown(); // Disable new tasks from being submitted
   try {
     // Wait a while for existing tasks to terminate
     if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {
       pool.shutdownNow(); // Cancel currently executing tasks
       // Wait a while for tasks to respond to being cancelled
       if (!pool.awaitTermination(60, TimeUnit.SECONDS))
           System.err.println("Pool did not terminate");
     }
   } catch (InterruptedException ie) {
     // (Re-)Cancel if current thread also interrupted
     pool.shutdownNow();
     // Preserve interrupt status
     Thread.currentThread().interrupt();
   }
 }
 </pre>

 <p>Memory consistency effects: Actions in a thread prior to the
 submission of a <TT>Runnable</TT> or <TT>Callable</TT> task to an
 <TT>ExecutorService</TT>
 <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>
 any actions taken by that task, which in turn <i>happen-before</i> the
 result is retrieved via <TT>Future.get()</TT>.
 <DL><DT><B>Authors:</B></DT><DD>Doug Lea</DD></DL><DL><DT><B>Since:</B></DT><DD>1.5</DD></DL>
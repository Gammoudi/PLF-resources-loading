 An <a href='../java/util/concurrent/ExecutorService.html' title='ExecutorService'>ExecutorService</a> that can schedule commands to run after a given
 delay, or to execute periodically.

 <p> The <tt>schedule</tt> methods create tasks with various delays
 and return a task object that can be used to cancel or check
 execution. The <tt>scheduleAtFixedRate</tt> and
 <tt>scheduleWithFixedDelay</tt> methods create and execute tasks
 that run periodically until cancelled.

 <p> Commands submitted using the <a href='../java/util/concurrent/Executor.html#execute' title='Executor.execute'>Executor.execute</a> and
 <a href='../java/util/concurrent/ExecutorService.html' title='ExecutorService'>ExecutorService</a> <tt>submit</tt> methods are scheduled with
 a requested delay of zero. Zero and negative delays (but not
 periods) are also allowed in <tt>schedule</tt> methods, and are
 treated as requests for immediate execution.

 <p>All <tt>schedule</tt> methods accept <em>relative</em> delays and
 periods as arguments, not absolute times or dates. It is a simple
 matter to transform an absolute time represented as a java.util.Date to the required form. For example, to schedule at
 a certain future <tt>date</tt>, you can use: <tt>schedule(task,
 date.getTime() - System.currentTimeMillis(),
 TimeUnit.MILLISECONDS)</tt>. Beware however that expiration of a
 relative delay need not coincide with the current <tt>Date</tt> at
 which the task is enabled due to network time synchronization
 protocols, clock drift, or other factors.

 The <a href='../java/util/concurrent/Executors.html' title='Executors'>Executors</a> class provides convenient factory methods for
 the ScheduledExecutorService implementations provided in this package.

 <h3>Usage Example</h3>

 Here is a class with a method that sets up a ScheduledExecutorService
 to beep every ten seconds for an hour:

 <pre>
 import static java.util.concurrent.TimeUnit.*;
 class BeeperControl {
    private final ScheduledExecutorService scheduler =
       Executors.newScheduledThreadPool(1);

    public void beepForAnHour() {
        final Runnable beeper = new Runnable() {
                public void run() { System.out.println("beep"); }
            };
        final ScheduledFuture&lt;?&gt; beeperHandle =
            scheduler.scheduleAtFixedRate(beeper, 10, 10, SECONDS);
        scheduler.schedule(new Runnable() {
                public void run() { beeperHandle.cancel(true); }
            }, 60 * 60, SECONDS);
    }
 }
 </pre>
 <DL><DT><B>Authors:</B></DT><DD>Doug Lea</DD></DL><DL><DT><B>Since:</B></DT><DD>1.5</DD></DL>
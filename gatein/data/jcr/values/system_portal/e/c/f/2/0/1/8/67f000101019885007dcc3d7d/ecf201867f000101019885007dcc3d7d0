 A linear collection that supports element insertion and removal at
 both ends.  The name <i>deque</i> is short for "double ended queue"
 and is usually pronounced "deck".  Most <tt>Deque</tt>
 implementations place no fixed limits on the number of elements
 they may contain, but this interface supports capacity-restricted
 deques as well as those with no fixed size limit.

 <p>This interface defines methods to access the elements at both
 ends of the deque.  Methods are provided to insert, remove, and
 examine the element.  Each of these methods exists in two forms:
 one throws an exception if the operation fails, the other returns a
 special value (either <tt>null</tt> or <tt>false</tt>, depending on
 the operation).  The latter form of the insert operation is
 designed specifically for use with capacity-restricted
 <tt>Deque</tt> implementations; in most implementations, insert
 operations cannot fail.

 <p>The twelve methods described above are summarized in the
 following table:

 <p>
 <table BORDER CELLPADDING=3 CELLSPACING=1>
  <tr>
    <td></td>
    <td ALIGN=CENTER COLSPAN = 2> <b>First Element (Head)</b></td>
    <td ALIGN=CENTER COLSPAN = 2> <b>Last Element (Tail)</b></td>
  </tr>
  <tr>
    <td></td>
    <td ALIGN=CENTER><em>Throws exception</em></td>
    <td ALIGN=CENTER><em>Special value</em></td>
    <td ALIGN=CENTER><em>Throws exception</em></td>
    <td ALIGN=CENTER><em>Special value</em></td>
  </tr>
  <tr>
    <td><b>Insert</b></td>
    <td><a href='#addFirst'>addFirst(e)</a></td>
    <td><a href='#offerFirst'>offerFirst(e)</a></td>
    <td><a href='#addLast'>addLast(e)</a></td>
    <td><a href='#offerLast'>offerLast(e)</a></td>
  </tr>
  <tr>
    <td><b>Remove</b></td>
    <td><a href='#removeFirst'>removeFirst()</a></td>
    <td><a href='#pollFirst'>pollFirst()</a></td>
    <td><a href='#removeLast'>removeLast()</a></td>
    <td><a href='#pollLast'>pollLast()</a></td>
  </tr>
  <tr>
    <td><b>Examine</b></td>
    <td><a href='#getFirst'>getFirst()</a></td>
    <td><a href='#peekFirst'>peekFirst()</a></td>
    <td><a href='#getLast'>getLast()</a></td>
    <td><a href='#peekLast'>peekLast()</a></td>
  </tr>
 </table>

 <p>This interface extends the <a href='../java/util/Queue.html' title='Queue'>Queue</a> interface.  When a deque is
 used as a queue, FIFO (First-In-First-Out) behavior results.  Elements are
 added at the end of the deque and removed from the beginning.  The methods
 inherited from the <tt>Queue</tt> interface are precisely equivalent to
 <tt>Deque</tt> methods as indicated in the following table:

 <p>
 <table BORDER CELLPADDING=3 CELLSPACING=1>
  <tr>
    <td ALIGN=CENTER> <b><tt>Queue</tt> Method</b></td>
    <td ALIGN=CENTER> <b>Equivalent <tt>Deque</tt> Method</b></td>
  </tr>
  <tr>
    <td><a href='../java/util/Queue.html#add' title='add(e)'>add(e)</a></td>
    <td><a href='#addLast'>addLast(e)</a></td>
  </tr>
  <tr>
    <td><a href='../java/util/Queue.html#offer' title='offer(e)'>offer(e)</a></td>
    <td><a href='#offerLast'>offerLast(e)</a></td>
  </tr>
  <tr>
    <td><a href='../java/util/Queue.html#remove' title='remove()'>remove()</a></td>
    <td><a href='#removeFirst'>removeFirst()</a></td>
  </tr>
  <tr>
    <td><a href='../java/util/Queue.html#poll' title='poll()'>poll()</a></td>
    <td><a href='#pollFirst'>pollFirst()</a></td>
  </tr>
  <tr>
    <td><a href='../java/util/Queue.html#element' title='element()'>element()</a></td>
    <td><a href='#getFirst'>getFirst()</a></td>
  </tr>
  <tr>
    <td><a href='../java/util/Queue.html#peek' title='peek()'>peek()</a></td>
    <td><a href='#peek'>peekFirst()</a></td>
  </tr>
 </table>

 <p>Deques can also be used as LIFO (Last-In-First-Out) stacks.  This
 interface should be used in preference to the legacy <a href='../java/util/Stack.html' title='Stack'>Stack</a> class.
 When a deque is used as a stack, elements are pushed and popped from the
 beginning of the deque.  Stack methods are precisely equivalent to
 <tt>Deque</tt> methods as indicated in the table below:

 <p>
 <table BORDER CELLPADDING=3 CELLSPACING=1>
  <tr>
    <td ALIGN=CENTER> <b>Stack Method</b></td>
    <td ALIGN=CENTER> <b>Equivalent <tt>Deque</tt> Method</b></td>
  </tr>
  <tr>
    <td><a href='#push'>push(e)</a></td>
    <td><a href='#addFirst'>addFirst(e)</a></td>
  </tr>
  <tr>
    <td><a href='#pop'>pop()</a></td>
    <td><a href='#removeFirst'>removeFirst()</a></td>
  </tr>
  <tr>
    <td><a href='#peek'>peek()</a></td>
    <td><a href='#peekFirst'>peekFirst()</a></td>
  </tr>
 </table>

 <p>Note that the <a href='#peek'>peek</a> method works equally well when
 a deque is used as a queue or a stack; in either case, elements are
 drawn from the beginning of the deque.

 <p>This interface provides two methods to remove interior
 elements, <a href='#removeFirstOccurrence'>removeFirstOccurrence</a> and
 <a href='#removeLastOccurrence'>removeLastOccurrence</a>.

 <p>Unlike the <a href='../java/util/List.html' title='List'>List</a> interface, this interface does not
 provide support for indexed access to elements.

 <p>While <tt>Deque</tt> implementations are not strictly required
 to prohibit the insertion of null elements, they are strongly
 encouraged to do so.  Users of any <tt>Deque</tt> implementations
 that do allow null elements are strongly encouraged <i>not</i> to
 take advantage of the ability to insert nulls.  This is so because
 <tt>null</tt> is used as a special return value by various methods
 to indicated that the deque is empty.

 <p><tt>Deque</tt> implementations generally do not define
 element-based versions of the <tt>equals</tt> and <tt>hashCode</tt>
 methods, but instead inherit the identity-based versions from class
 <tt>Object</tt>.

 <p>This interface is a member of the <a
 href="{@docRoot}/../technotes/guides/collections/index.html"> Java Collections
 Framework</a>.
 <DL><DT><B>Parameters:</B></DT><DD><code><E></code> -  the type of elements held in this collection</DD></DL><DL><DT><B>Authors:</B></DT><DD>Doug Lea</DD><DD>Josh Bloch</DD></DL><DL><DT><B>Since:</B></DT><DD>1.6</DD></DL>
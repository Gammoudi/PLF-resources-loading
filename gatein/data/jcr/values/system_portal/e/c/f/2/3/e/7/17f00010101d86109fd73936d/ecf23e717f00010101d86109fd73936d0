 <p>Hash table and linked list implementation of the <tt>Map</tt> interface,
 with predictable iteration order.  This implementation differs from
 <tt>HashMap</tt> in that it maintains a doubly-linked list running through
 all of its entries.  This linked list defines the iteration ordering,
 which is normally the order in which keys were inserted into the map
 (<i>insertion-order</i>).  Note that insertion order is not affected
 if a key is <i>re-inserted</i> into the map.  (A key <tt>k</tt> is
 reinserted into a map <tt>m</tt> if <tt>m.put(k, v)</tt> is invoked when
 <tt>m.containsKey(k)</tt> would return <tt>true</tt> immediately prior to
 the invocation.)

 <p>This implementation spares its clients from the unspecified, generally
 chaotic ordering provided by <a href='../java/util/HashMap.html' title='HashMap'>HashMap</a> (and <a href='../java/util/Hashtable.html' title='Hashtable'>Hashtable</a>),
 without incurring the increased cost associated with <a href='../java/util/TreeMap.html' title='TreeMap'>TreeMap</a>.  It
 can be used to produce a copy of a map that has the same order as the
 original, regardless of the original map's implementation:
 <pre>
     void foo(Map m) {
         Map copy = new LinkedHashMap(m);
         ...
     }
 </pre>
 This technique is particularly useful if a module takes a map on input,
 copies it, and later returns results whose order is determined by that of
 the copy.  (Clients generally appreciate having things returned in the same
 order they were presented.)

 <p>A special <a href='#LinkedHashMap(int, float, boolean)'>constructor</a> is
 provided to create a linked hash map whose order of iteration is the order
 in which its entries were last accessed, from least-recently accessed to
 most-recently (<i>access-order</i>).  This kind of map is well-suited to
 building LRU caches.  Invoking the <tt>put</tt> or <tt>get</tt> method
 results in an access to the corresponding entry (assuming it exists after
 the invocation completes).  The <tt>putAll</tt> method generates one entry
 access for each mapping in the specified map, in the order that key-value
 mappings are provided by the specified map's entry set iterator.  <i>No
 other methods generate entry accesses.</i> In particular, operations on
 collection-views do <i>not</i> affect the order of iteration of the backing
 map.

 <p>The <a href='#removeEldestEntry(Map.Entry)'>removeEldestEntry(Map.Entry)</a> method may be overridden to
 impose a policy for removing stale mappings automatically when new mappings
 are added to the map.

 <p>This class provides all of the optional <tt>Map</tt> operations, and
 permits null elements.  Like <tt>HashMap</tt>, it provides constant-time
 performance for the basic operations (<tt>add</tt>, <tt>contains</tt> and
 <tt>remove</tt>), assuming the hash function disperses elements
 properly among the buckets.  Performance is likely to be just slightly
 below that of <tt>HashMap</tt>, due to the added expense of maintaining the
 linked list, with one exception: Iteration over the collection-views
 of a <tt>LinkedHashMap</tt> requires time proportional to the <i>size</i>
 of the map, regardless of its capacity.  Iteration over a <tt>HashMap</tt>
 is likely to be more expensive, requiring time proportional to its
 <i>capacity</i>.

 <p>A linked hash map has two parameters that affect its performance:
 <i>initial capacity</i> and <i>load factor</i>.  They are defined precisely
 as for <tt>HashMap</tt>.  Note, however, that the penalty for choosing an
 excessively high value for initial capacity is less severe for this class
 than for <tt>HashMap</tt>, as iteration times for this class are unaffected
 by capacity.

 <p><strong>Note that this implementation is not synchronized.</strong>
 If multiple threads access a linked hash map concurrently, and at least
 one of the threads modifies the map structurally, it <em>must</em> be
 synchronized externally.  This is typically accomplished by
 synchronizing on some object that naturally encapsulates the map.

 If no such object exists, the map should be "wrapped" using the
 <a href='../java/util/Collections.html#synchronizedMap' title='Collections.synchronizedMap'>Collections.synchronizedMap</a>
 method.  This is best done at creation time, to prevent accidental
 unsynchronized access to the map:<pre>
   Map m = Collections.synchronizedMap(new LinkedHashMap(...));</pre>

 A structural modification is any operation that adds or deletes one or more
 mappings or, in the case of access-ordered linked hash maps, affects
 iteration order.  In insertion-ordered linked hash maps, merely changing
 the value associated with a key that is already contained in the map is not
 a structural modification.  <strong>In access-ordered linked hash maps,
 merely querying the map with <tt>get</tt> is a structural
 modification.</strong>)

 <p>The iterators returned by the <tt>iterator</tt> method of the collections
 returned by all of this class's collection view methods are
 <em>fail-fast</em>: if the map is structurally modified at any time after
 the iterator is created, in any way except through the iterator's own
 <tt>remove</tt> method, the iterator will throw a <a href='../java/util/ConcurrentModificationException.html' title='ConcurrentModificationException'>ConcurrentModificationException</a>.  Thus, in the face of concurrent
 modification, the iterator fails quickly and cleanly, rather than risking
 arbitrary, non-deterministic behavior at an undetermined time in the future.

 <p>Note that the fail-fast behavior of an iterator cannot be guaranteed
 as it is, generally speaking, impossible to make any hard guarantees in the
 presence of unsynchronized concurrent modification.  Fail-fast iterators
 throw <tt>ConcurrentModificationException</tt> on a best-effort basis.
 Therefore, it would be wrong to write a program that depended on this
 exception for its correctness:   <i>the fail-fast behavior of iterators
 should be used only to detect bugs.</i>

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.
 <DL><DT><B>Parameters:</B></DT><DD><code><K></code> -  the type of keys maintained by this map</DD><DD><code><V></code> -  the type of mapped values</DD></DL><DL><DT><B>Authors:</B></DT><DD>Josh Bloch</DD></DL><DL><DT><B>Version:</B></DT><DD>%I%, %G%</DD></DL><DL><DT><B>See Also:</B></DT><DD>java.lang.Object#hashCode()</DD><DD><a href='../java/util/Collection.html' title='Collection'>Collection</a></DD><DD><a href='../java/util/Map.html' title='Map'>Map</a></DD><DD><a href='../java/util/HashMap.html' title='HashMap'>HashMap</a></DD><DD><a href='../java/util/TreeMap.html' title='TreeMap'>TreeMap</a></DD><DD><a href='../java/util/Hashtable.html' title='Hashtable'>Hashtable</a></DD></DL><DL><DT><B>Since:</B></DT><DD>1.4</DD></DL>
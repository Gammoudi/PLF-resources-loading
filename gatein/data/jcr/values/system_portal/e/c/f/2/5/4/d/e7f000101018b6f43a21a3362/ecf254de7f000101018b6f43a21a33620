 An object that maps keys to values.  A map cannot contain duplicate keys;
 each key can map to at most one value.

 <p>This interface takes the place of the <tt>Dictionary</tt> class, which
 was a totally abstract class rather than an interface.

 <p>The <tt>Map</tt> interface provides three <i>collection views</i>, which
 allow a map's contents to be viewed as a set of keys, collection of values,
 or set of key-value mappings.  The <i>order</i> of a map is defined as
 the order in which the iterators on the map's collection views return their
 elements.  Some map implementations, like the <tt>TreeMap</tt> class, make
 specific guarantees as to their order; others, like the <tt>HashMap</tt>
 class, do not.

 <p>Note: great care must be exercised if mutable objects are used as map
 keys.  The behavior of a map is not specified if the value of an object is
 changed in a manner that affects <tt>equals</tt> comparisons while the
 object is a key in the map.  A special case of this prohibition is that it
 is not permissible for a map to contain itself as a key.  While it is
 permissible for a map to contain itself as a value, extreme caution is
 advised: the <tt>equals</tt> and <tt>hashCode</tt> methods are no longer
 well defined on such a map.

 <p>All general-purpose map implementation classes should provide two
 "standard" constructors: a void (no arguments) constructor which creates an
 empty map, and a constructor with a single argument of type <tt>Map</tt>,
 which creates a new map with the same key-value mappings as its argument.
 In effect, the latter constructor allows the user to copy any map,
 producing an equivalent map of the desired class.  There is no way to
 enforce this recommendation (as interfaces cannot contain constructors) but
 all of the general-purpose map implementations in the JDK comply.

 <p>The "destructive" methods contained in this interface, that is, the
 methods that modify the map on which they operate, are specified to throw
 <tt>UnsupportedOperationException</tt> if this map does not support the
 operation.  If this is the case, these methods may, but are not required
 to, throw an <tt>UnsupportedOperationException</tt> if the invocation would
 have no effect on the map.  For example, invoking the <a href='#putAll(Map)'>putAll(Map)</a>
 method on an unmodifiable map may, but is not required to, throw the
 exception if the map whose mappings are to be "superimposed" is empty.

 <p>Some map implementations have restrictions on the keys and values they
 may contain.  For example, some implementations prohibit null keys and
 values, and some have restrictions on the types of their keys.  Attempting
 to insert an ineligible key or value throws an unchecked exception,
 typically <tt>NullPointerException</tt> or <tt>ClassCastException</tt>.
 Attempting to query the presence of an ineligible key or value may throw an
 exception, or it may simply return false; some implementations will exhibit
 the former behavior and some will exhibit the latter.  More generally,
 attempting an operation on an ineligible key or value whose completion
 would not result in the insertion of an ineligible element into the map may
 throw an exception or it may succeed, at the option of the implementation.
 Such exceptions are marked as "optional" in the specification for this
 interface.

 <p>This interface is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.

 <p>Many methods in Collections Framework interfaces are defined
 in terms of the java.lang.Object#equals(java.lang.Object) method.  For
 example, the specification for the <a href='#containsKey(java.lang.Object)'> containsKey(Object key)</a> method says: "returns <tt>true</tt> if and
 only if this map contains a mapping for a key <tt>k</tt> such that
 <tt>(key==null ? k==null : key.equals(k))</tt>." This specification should
 <i>not</i> be construed to imply that invoking <tt>Map.containsKey</tt>
 with a non-null argument <tt>key</tt> will cause <tt>key.equals(k)</tt> to
 be invoked for any key <tt>k</tt>.  Implementations are free to
 implement optimizations whereby the <tt>equals</tt> invocation is avoided,
 for example, by first comparing the hash codes of the two keys.  (The
 java.lang.Object#hashCode() specification guarantees that two objects with
 unequal hash codes cannot be equal.)  More generally, implementations of
 the various Collections Framework interfaces are free to take advantage of
 the specified behavior of underlying java.lang.Object methods wherever the
 implementor deems it appropriate.
 <DL><DT><B>Parameters:</B></DT><DD><code><K></code> -  the type of keys maintained by this map</DD><DD><code><V></code> -  the type of mapped values</DD></DL><DL><DT><B>Authors:</B></DT><DD>Josh Bloch</DD></DL><DL><DT><B>Version:</B></DT><DD>%I%, %G%</DD></DL><DL><DT><B>See Also:</B></DT><DD><a href='../java/util/HashMap.html' title='HashMap'>HashMap</a></DD><DD><a href='../java/util/TreeMap.html' title='TreeMap'>TreeMap</a></DD><DD><a href='../java/util/Hashtable.html' title='Hashtable'>Hashtable</a></DD><DD><a href='../java/util/SortedMap.html' title='SortedMap'>SortedMap</a></DD><DD><a href='../java/util/Collection.html' title='Collection'>Collection</a></DD><DD><a href='../java/util/Set.html' title='Set'>Set</a></DD></DL><DL><DT><B>Since:</B></DT><DD>1.2</DD></DL>
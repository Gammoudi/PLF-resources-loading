 This class is for property permissions.

 <P>
 The name is the name of the property ("java.home",
 "os.name", etc). The naming
 convention follows the  hierarchical property naming convention.
 Also, an asterisk
 may appear at the end of the name, following a ".", or by itself, to
 signify a wildcard match. For example: "java.*" or "*" is valid,
 "*java" or "a*b" is not valid.
 <P>
 <P>
 The actions to be granted are passed to the constructor in a string containing
 a list of zero or more comma-separated keywords. The possible keywords are
 "read" and "write". Their meaning is defined as follows:
 <P>
 <DL>
    <DT> read
    <DD> read permission. Allows <code>System.getProperty</code> to
         be called.
    <DT> write
    <DD> write permission. Allows <code>System.setProperty</code> to
         be called.
 </DL>
 <P>
 The actions string is converted to lowercase before processing.
 <P>
 Care should be taken before granting code permission to access
 certain system properties.  For example, granting permission to
 access the "java.home" system property gives potentially malevolent
 code sensitive information about the system environment (the Java
 installation directory).  Also, granting permission to access
 the "user.name" and "user.home" system properties gives potentially
 malevolent code sensitive information about the user environment
 (the user's account name and home directory).<DL><DT><B>serial:</B></DT><DD>exclude</DD></DL>
 <DL><DT><B>Authors:</B></DT><DD>Roland Schemers</DD></DL><DL><DT><B>Version:</B></DT><DD>%I% %E%</DD></DL><DL><DT><B>See Also:</B></DT><DD>java.security.BasicPermission</DD><DD>java.security.Permission</DD><DD>java.security.Permissions</DD><DD>java.security.PermissionCollection</DD><DD>java.lang.SecurityManager</DD></DL><DL><DT><B>Since:</B></DT><DD>1.2</DD></DL>
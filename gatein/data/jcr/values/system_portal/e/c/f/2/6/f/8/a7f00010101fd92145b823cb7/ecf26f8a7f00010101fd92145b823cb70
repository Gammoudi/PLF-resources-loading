 A <a href='../java/util/Set.html' title='Set'>Set</a> that further provides a <i>total ordering</i> on its elements.
 The elements are ordered using their {<DL><DT><B>linkplain:</B></DT><DD>Comparable natural
 ordering}, or by a <a href='../java/util/Comparator.html' title='Comparator'>Comparator</a> typically provided at sorted
 set creation time.  The set's iterator will traverse the set in
 ascending element order. Several additional operations are provided
 to take advantage of the ordering.  (This interface is the set
 analogue of <a href='../java/util/SortedMap.html' title='SortedMap'>SortedMap</a>.)

 <p>All elements inserted into a sorted set must implement the <tt>Comparable</tt>
 interface (or be accepted by the specified comparator).  Furthermore, all
 such elements must be <i>mutually comparable</i>: <tt>e1.compareTo(e2)</tt>
 (or <tt>comparator.compare(e1, e2)</tt>) must not throw a
 <tt>ClassCastException</tt> for any elements <tt>e1</tt> and <tt>e2</tt> in
 the sorted set.  Attempts to violate this restriction will cause the
 offending method or constructor invocation to throw a
 <tt>ClassCastException</tt>.

 <p>Note that the ordering maintained by a sorted set (whether or not an
 explicit comparator is provided) must be <i>consistent with equals</i> if
 the sorted set is to correctly implement the <tt>Set</tt> interface.  (See
 the <tt>Comparable</tt> interface or <tt>Comparator</tt> interface for a
 precise definition of <i>consistent with equals</i>.)  This is so because
 the <tt>Set</tt> interface is defined in terms of the <tt>equals</tt>
 operation, but a sorted set performs all element comparisons using its
 <tt>compareTo</tt> (or <tt>compare</tt>) method, so two elements that are
 deemed equal by this method are, from the standpoint of the sorted set,
 equal.  The behavior of a sorted set <i>is</i> well-defined even if its
 ordering is inconsistent with equals; it just fails to obey the general
 contract of the <tt>Set</tt> interface.

 <p>All general-purpose sorted set implementation classes should
 provide four "standard" constructors: 1) A void (no arguments)
 constructor, which creates an empty sorted set sorted according to
 the natural ordering of its elements.  2) A constructor with a
 single argument of type <tt>Comparator</tt>, which creates an empty
 sorted set sorted according to the specified comparator.  3) A
 constructor with a single argument of type <tt>Collection</tt>,
 which creates a new sorted set with the same elements as its
 argument, sorted according to the natural ordering of the elements.
 4) A constructor with a single argument of type <tt>SortedSet</tt>,
 which creates a new sorted set with the same elements and the same
 ordering as the input sorted set.  There is no way to enforce this
 recommendation, as interfaces cannot contain constructors.

 <p>Note: several methods return subsets with restricted ranges.
 Such ranges are <i>half-open</i>, that is, they include their low
 endpoint but not their high endpoint (where applicable).
 If you need a <i>closed range</i> (which includes both endpoints), and
 the element type allows for calculation of the successor of a given
 value, merely request the subrange from <tt>lowEndpoint</tt> to
 <tt>successor(highEndpoint)</tt>.  For example, suppose that <tt>s</tt>
 is a sorted set of strings.  The following idiom obtains a view
 containing all of the strings in <tt>s</tt> from <tt>low</tt> to
 <tt>high</tt>, inclusive:<pre>
   SortedSet&lt;String&gt; sub = s.subSet(low, high+"\0");</pre>

 A similar technique can be used to generate an <i>open range</i> (which
 contains neither endpoint).  The following idiom obtains a view
 containing all of the Strings in <tt>s</tt> from <tt>low</tt> to
 <tt>high</tt>, exclusive:<pre>
   SortedSet&lt;String&gt; sub = s.subSet(low+"\0", high);</pre>

 <p>This interface is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.</DD></DL>
 <DL><DT><B>Parameters:</B></DT><DD><code><E></code> -  the type of elements maintained by this set</DD></DL><DL><DT><B>Authors:</B></DT><DD>Josh Bloch</DD></DL><DL><DT><B>Version:</B></DT><DD>%I%, %G%</DD></DL><DL><DT><B>See Also:</B></DT><DD><a href='../java/util/Set.html' title='Set'>Set</a></DD><DD><a href='../java/util/TreeSet.html' title='TreeSet'>TreeSet</a></DD><DD><a href='../java/util/SortedMap.html' title='SortedMap'>SortedMap</a></DD><DD><a href='../java/util/Collection.html' title='Collection'>Collection</a></DD><DD>java.lang.Comparable</DD><DD><a href='../java/util/Comparator.html' title='Comparator'>Comparator</a></DD><DD>java.lang.ClassCastException</DD></DL><DL><DT><B>Since:</B></DT><DD>1.2</DD></DL>
 A <a href='../java/util/NavigableSet.html' title='NavigableSet'>NavigableSet</a> implementation based on a <a href='../java/util/TreeMap.html' title='TreeMap'>TreeMap</a>.
 The elements are ordered using their {<DL><DT><B>linkplain:</B></DT><DD>Comparable natural
 ordering}, or by a <a href='../java/util/Comparator.html' title='Comparator'>Comparator</a> provided at set creation
 time, depending on which constructor is used.

 <p>This implementation provides guaranteed log(n) time cost for the basic
 operations (<TT>add</TT>, <TT>remove</TT> and <TT>contains</TT>).

 <p>Note that the ordering maintained by a set (whether or not an explicit
 comparator is provided) must be <i>consistent with equals</i> if it is to
 correctly implement the <TT>Set</TT> interface.  (See <TT>Comparable</TT>
 or <TT>Comparator</TT> for a precise definition of <i>consistent with
 equals</i>.)  This is so because the <TT>Set</TT> interface is defined in
 terms of the <TT>equals</TT> operation, but a <TT>TreeSet</TT> instance
 performs all element comparisons using its <TT>compareTo</TT> (or
 <TT>compare</TT>) method, so two elements that are deemed equal by this method
 are, from the standpoint of the set, equal.  The behavior of a set
 <i>is</i> well-defined even if its ordering is inconsistent with equals; it
 just fails to obey the general contract of the <TT>Set</TT> interface.

 <p><strong>Note that this implementation is not synchronized.</strong>
 If multiple threads access a tree set concurrently, and at least one
 of the threads modifies the set, it <i>must</i> be synchronized
 externally.  This is typically accomplished by synchronizing on some
 object that naturally encapsulates the set.
 If no such object exists, the set should be "wrapped" using the
 <a href='../java/util/Collections.html#synchronizedSortedSet' title='Collections.synchronizedSortedSet'>Collections.synchronizedSortedSet</a>
 method.  This is best done at creation time, to prevent accidental
 unsynchronized access to the set: <pre>
   SortedSet s = Collections.synchronizedSortedSet(new TreeSet(...));</pre>

 <p>The iterators returned by this class's <TT>iterator</TT> method are
 <i>fail-fast</i>: if the set is modified at any time after the iterator is
 created, in any way except through the iterator's own <TT>remove</TT>
 method, the iterator will throw a <a href='../java/util/ConcurrentModificationException.html' title='ConcurrentModificationException'>ConcurrentModificationException</a>.
 Thus, in the face of concurrent modification, the iterator fails quickly
 and cleanly, rather than risking arbitrary, non-deterministic behavior at
 an undetermined time in the future.

 <p>Note that the fail-fast behavior of an iterator cannot be guaranteed
 as it is, generally speaking, impossible to make any hard guarantees in the
 presence of unsynchronized concurrent modification.  Fail-fast iterators
 throw <TT>ConcurrentModificationException</TT> on a best-effort basis.
 Therefore, it would be wrong to write a program that depended on this
 exception for its correctness:   <i>the fail-fast behavior of iterators
 should be used only to detect bugs.</i>

 <p>This class is a member of the
 <a href="{@docRoot}/../technotes/guides/collections/index.html">
 Java Collections Framework</a>.</DD></DL>
 <DL><DT><B>Parameters:</B></DT><DD><code><E></code> -  the type of elements maintained by this set</DD></DL><DL><DT><B>Authors:</B></DT><DD>Josh Bloch</DD></DL><DL><DT><B>Version:</B></DT><DD>%I%, %G%</DD></DL><DL><DT><B>See Also:</B></DT><DD><a href='../java/util/Collection.html' title='Collection'>Collection</a></DD><DD><a href='../java/util/Set.html' title='Set'>Set</a></DD><DD><a href='../java/util/HashSet.html' title='HashSet'>HashSet</a></DD><DD>java.lang.Comparable</DD><DD><a href='../java/util/Comparator.html' title='Comparator'>Comparator</a></DD><DD><a href='../java/util/TreeMap.html' title='TreeMap'>TreeMap</a></DD></DL><DL><DT><B>Since:</B></DT><DD>1.2</DD></DL>
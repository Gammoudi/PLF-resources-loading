 <TT>Condition</TT> factors out the <TT>Object</TT> monitor
 methods (java.lang.Object#wait(), java.lang.Object#notify
 and java.lang.Object#notifyAll) into distinct objects to
 give the effect of having multiple wait-sets per object, by
 combining them with the use of arbitrary <a href='../java/util/concurrent/locks/Lock.html' title='Lock'>Lock</a> implementations.
 Where a <TT>Lock</TT> replaces the use of <TT>synchronized</TT> methods
 and statements, a <TT>Condition</TT> replaces the use of the Object
 monitor methods.

 <p>Conditions (also known as <em>condition queues</em> or
 <em>condition variables</em>) provide a means for one thread to
 suspend execution (to &quot;wait&quot;) until notified by another
 thread that some state condition may now be true.  Because access
 to this shared state information occurs in different threads, it
 must be protected, so a lock of some form is associated with the
 condition. The key property that waiting for a condition provides
 is that it <em>atomically</em> releases the associated lock and
 suspends the current thread, just like <TT>Object.wait</TT>.

 <p>A <TT>Condition</TT> instance is intrinsically bound to a lock.
 To obtain a <TT>Condition</TT> instance for a particular <a href='../java/util/concurrent/locks/Lock.html' title='Lock'>Lock</a>
 instance use its <a href='../java/util/concurrent/locks/Lock.html#newCondition' title='newCondition()'>newCondition()</a> method.

 <p>As an example, suppose we have a bounded buffer which supports
 <TT>put</TT> and <TT>take</TT> methods.  If a
 <TT>take</TT> is attempted on an empty buffer, then the thread will block
 until an item becomes available; if a <TT>put</TT> is attempted on a
 full buffer, then the thread will block until a space becomes available.
 We would like to keep waiting <TT>put</TT> threads and <TT>take</TT>
 threads in separate wait-sets so that we can use the optimization of
 only notifying a single thread at a time when items or spaces become
 available in the buffer. This can be achieved using two
 <a href='../java/util/concurrent/locks/Condition.html' title='Condition'>Condition</a> instances.
 <pre>
 class BoundedBuffer {
   <b>final Lock lock = new ReentrantLock();</b>
   final Condition notFull  = <b>lock.newCondition(); </b>
   final Condition notEmpty = <b>lock.newCondition(); </b>

   final Object[] items = new Object[100];
   int putptr, takeptr, count;

   public void put(Object x) throws InterruptedException {
     <b>lock.lock();
     try {</b>
       while (count == items.length)
         <b>notFull.await();</b>
       items[putptr] = x;
       if (++putptr == items.length) putptr = 0;
       ++count;
       <b>notEmpty.signal();</b>
     <b>} finally {
       lock.unlock();
     }</b>
   }

   public Object take() throws InterruptedException {
     <b>lock.lock();
     try {</b>
       while (count == 0)
         <b>notEmpty.await();</b>
       Object x = items[takeptr];
       if (++takeptr == items.length) takeptr = 0;
       --count;
       <b>notFull.signal();</b>
       return x;
     <b>} finally {
       lock.unlock();
     }</b>
   }
 }
 </pre>

 (The java.util.concurrent.ArrayBlockingQueue class provides
 this functionality, so there is no reason to implement this
 sample usage class.)

 <p>A <TT>Condition</TT> implementation can provide behavior and semantics
 that is
 different from that of the <TT>Object</TT> monitor methods, such as
 guaranteed ordering for notifications, or not requiring a lock to be held
 when performing notifications.
 If an implementation provides such specialized semantics then the
 implementation must document those semantics.

 <p>Note that <TT>Condition</TT> instances are just normal objects and can
 themselves be used as the target in a <TT>synchronized</TT> statement,
 and can have their own monitor java.lang.Object#wait and
 java.lang.Object#notify methods invoked.
 Acquiring the monitor lock of a <TT>Condition</TT> instance, or using its
 monitor methods, has no specified relationship with acquiring the
 <a href='../java/util/concurrent/locks/Lock.html' title='Lock'>Lock</a> associated with that <TT>Condition</TT> or the use of its
 {<DL><DT><B>linkplain:</B></DT><DD>#await waiting} and {@linkplain #signal signalling} methods.
 It is recommended that to avoid confusion you never use <TT>Condition</TT>
 instances in this way, except perhaps within their own implementation.

 <p>Except where noted, passing a <TT>null</TT> value for any parameter
 will result in a java.lang.NullPointerException being thrown.

 <h3>Implementation Considerations</h3>

 <p>When waiting upon a <TT>Condition</TT>, a &quot;<em>spurious
 wakeup</em>&quot; is permitted to occur, in
 general, as a concession to the underlying platform semantics.
 This has little practical impact on most application programs as a
 <TT>Condition</TT> should always be waited upon in a loop, testing
 the state predicate that is being waited for.  An implementation is
 free to remove the possibility of spurious wakeups but it is
 recommended that applications programmers always assume that they can
 occur and so always wait in a loop.

 <p>The three forms of condition waiting
 (interruptible, non-interruptible, and timed) may differ in their ease of
 implementation on some platforms and in their performance characteristics.
 In particular, it may be difficult to provide these features and maintain
 specific semantics such as ordering guarantees.
 Further, the ability to interrupt the actual suspension of the thread may
 not always be feasible to implement on all platforms.

 <p>Consequently, an implementation is not required to define exactly the
 same guarantees or semantics for all three forms of waiting, nor is it
 required to support interruption of the actual suspension of the thread.

 <p>An implementation is required to
 clearly document the semantics and guarantees provided by each of the
 waiting methods, and when an implementation does support interruption of
 thread suspension then it must obey the interruption semantics as defined
 in this interface.

 <p>As interruption generally implies cancellation, and checks for
 interruption are often infrequent, an implementation can favor responding
 to an interrupt over normal method return. This is true even if it can be
 shown that the interrupt occurred after another action may have unblocked
 the thread. An implementation should document this behavior.</DD></DL>
 <DL><DT><B>Authors:</B></DT><DD>Doug Lea</DD></DL><DL><DT><B>Since:</B></DT><DD>1.5</DD></DL>
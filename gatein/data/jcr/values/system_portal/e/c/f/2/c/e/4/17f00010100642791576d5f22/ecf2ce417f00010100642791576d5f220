 <TT>Lock</TT> implementations provide more extensive locking
 operations than can be obtained using <TT>synchronized</TT> methods
 and statements.  They allow more flexible structuring, may have
 quite different properties, and may support multiple associated
 <a href='../java/util/concurrent/locks/Condition.html' title='Condition'>Condition</a> objects.

 <p>A lock is a tool for controlling access to a shared resource by
 multiple threads. Commonly, a lock provides exclusive access to a
 shared resource: only one thread at a time can acquire the lock and
 all access to the shared resource requires that the lock be
 acquired first. However, some locks may allow concurrent access to
 a shared resource, such as the read lock of a <a href='../java/util/concurrent/locks/ReadWriteLock.html' title='ReadWriteLock'>ReadWriteLock</a>.

 <p>The use of <TT>synchronized</TT> methods or statements provides
 access to the implicit monitor lock associated with every object, but
 forces all lock acquisition and release to occur in a block-structured way:
 when multiple locks are acquired they must be released in the opposite
 order, and all locks must be released in the same lexical scope in which
 they were acquired.

 <p>While the scoping mechanism for <TT>synchronized</TT> methods
 and statements makes it much easier to program with monitor locks,
 and helps avoid many common programming errors involving locks,
 there are occasions where you need to work with locks in a more
 flexible way. For example, some algorithms for traversing
 concurrently accessed data structures require the use of
 &quot;hand-over-hand&quot; or &quot;chain locking&quot;: you
 acquire the lock of node A, then node B, then release A and acquire
 C, then release B and acquire D and so on.  Implementations of the
 <TT>Lock</TT> interface enable the use of such techniques by
 allowing a lock to be acquired and released in different scopes,
 and allowing multiple locks to be acquired and released in any
 order.

 <p>With this increased flexibility comes additional
 responsibility. The absence of block-structured locking removes the
 automatic release of locks that occurs with <TT>synchronized</TT>
 methods and statements. In most cases, the following idiom
 should be used:

 <pre><tt>     Lock l = ...;
     l.lock();
     try {
         // access the resource protected by this lock
     } finally {
         l.unlock();
     }
 </tt></pre>

 When locking and unlocking occur in different scopes, care must be
 taken to ensure that all code that is executed while the lock is
 held is protected by try-finally or try-catch to ensure that the
 lock is released when necessary.

 <p><TT>Lock</TT> implementations provide additional functionality
 over the use of <TT>synchronized</TT> methods and statements by
 providing a non-blocking attempt to acquire a lock (<a href='#tryLock()'>tryLock()</a>), an attempt to acquire the lock that can be
 interrupted (<a href='#lockInterruptibly'>lockInterruptibly</a>, and an attempt to acquire
 the lock that can timeout (<a href='#tryLock(long, java.util.concurrent.TimeUnit)'>tryLock(long, TimeUnit)</a>).

 <p>A <TT>Lock</TT> class can also provide behavior and semantics
 that is quite different from that of the implicit monitor lock,
 such as guaranteed ordering, non-reentrant usage, or deadlock
 detection. If an implementation provides such specialized semantics
 then the implementation must document those semantics.

 <p>Note that <TT>Lock</TT> instances are just normal objects and can
 themselves be used as the target in a <TT>synchronized</TT> statement.
 Acquiring the
 monitor lock of a <TT>Lock</TT> instance has no specified relationship
 with invoking any of the <a href='#lock'>lock</a> methods of that instance.
 It is recommended that to avoid confusion you never use <TT>Lock</TT>
 instances in this way, except within their own implementation.

 <p>Except where noted, passing a <TT>null</TT> value for any
 parameter will result in a java.lang.NullPointerException being
 thrown.

 <h3>Memory Synchronization</h3>

 <p>All <TT>Lock</TT> implementations <em>must</em> enforce the same
 memory synchronization semantics as provided by the built-in monitor
 lock, as described in <a href="http://java.sun.com/docs/books/jls/">
 The Java Language Specification, Third Edition (17.4 Memory Model)</a>:
 <ul>
 <li>A successful <TT>lock</TT> operation has the same memory
 synchronization effects as a successful <em>Lock</em> action.
 <li>A successful <TT>unlock</TT> operation has the same
 memory synchronization effects as a successful <em>Unlock</em> action.
 </ul>

 Unsuccessful locking and unlocking operations, and reentrant
 locking/unlocking operations, do not require any memory
 synchronization effects.

 <h3>Implementation Considerations</h3>

 <p> The three forms of lock acquisition (interruptible,
 non-interruptible, and timed) may differ in their performance
 characteristics, ordering guarantees, or other implementation
 qualities.  Further, the ability to interrupt the <em>ongoing</em>
 acquisition of a lock may not be available in a given <TT>Lock</TT>
 class.  Consequently, an implementation is not required to define
 exactly the same guarantees or semantics for all three forms of
 lock acquisition, nor is it required to support interruption of an
 ongoing lock acquisition.  An implementation is required to clearly
 document the semantics and guarantees provided by each of the
 locking methods. It must also obey the interruption semantics as
 defined in this interface, to the extent that interruption of lock
 acquisition is supported: which is either totally, or only on
 method entry.

 <p>As interruption generally implies cancellation, and checks for
 interruption are often infrequent, an implementation can favor responding
 to an interrupt over normal method return. This is true even if it can be
 shown that the interrupt occurred after another action may have unblocked
 the thread. An implementation should document this behavior.
 <DL><DT><B>Authors:</B></DT><DD>Doug Lea</DD></DL><DL><DT><B>See Also:</B></DT><DD><a href='../java/util/concurrent/locks/ReentrantLock.html' title='ReentrantLock'>ReentrantLock</a></DD><DD><a href='../java/util/concurrent/locks/Condition.html' title='Condition'>Condition</a></DD><DD><a href='../java/util/concurrent/locks/ReadWriteLock.html' title='ReadWriteLock'>ReadWriteLock</a></DD></DL><DL><DT><B>Since:</B></DT><DD>1.5</DD></DL>